package name.khoobyar.joe.httpclient;

import static name.khoobyar.joe.gsspi.win32.Sspi.*;
import name.khoobyar.joe.gsspi.win32.SspiUtils;

import org.apache.http.auth.AuthScheme;
import org.apache.http.impl.auth.SPNegoScheme;
import org.ietf.jgss.GSSException;

import com.sun.jna.platform.win32.Sspi.CredHandle;
import com.sun.jna.platform.win32.Sspi.CtxtHandle;
import com.sun.jna.platform.win32.Sspi.TimeStamp;
import com.sun.jna.ptr.NativeLongByReference;

public class SspiSpnegoScheme
	extends SPNegoScheme
	implements AuthScheme
{
	private String securityPackageName = "Negotiate";
    private String servicePrincipalName;
    private transient CredHandle hCredentials;
    private transient TimeStamp credExpires;
    private transient CtxtHandle hContext;
    private transient TimeStamp ctxExpires;
    private transient long ctxAttrs;
	
	public SspiSpnegoScheme () { }
	public SspiSpnegoScheme (boolean stripPort) { super(stripPort); }
	
	@Override
	protected byte[] generateToken (byte[] input, String authServer)
		throws GSSException
	{
		// There is no input on the first call.
		if (input == null || input.length==0) {
			
			// Clean up any left over objects from a previous call.
			dispose ();
			
			// Get the service principal name and a credentials handle.
	        servicePrincipalName = SspiUtils.getServicePrincipalName ("HTTP", authServer);
	        credExpires = new TimeStamp ();
	        hCredentials = SspiUtils.getCurrentUserCredentials (securityPackageName, SECPKG_CRED_OUTBOUND, credExpires);
	        hContext = new CtxtHandle ();
			ctxExpires = new TimeStamp ();
		}
		
		// Return a token generated by security context initialization.
		NativeLongByReference attrs = new NativeLongByReference ();
        byte output[] = SspiUtils.initSecurityContext (hCredentials, hContext, servicePrincipalName,
        		                                       ISC_REQ_CONFIDENTIALITY, true, input, attrs, ctxExpires);
        ctxAttrs = attrs.getValue().longValue ();
        return output;
	}
	
	protected void dispose () {
		SspiUtils.dispose (hContext);
		SspiUtils.dispose (hCredentials);
		ctxExpires = null;
		hContext = null;
		ctxAttrs = -1;
		credExpires = null;
		hCredentials = null;
		servicePrincipalName = null;
	}
	
	public String getServicePrincipalName () {
		return servicePrincipalName;
	}
	
	public boolean isCompleted () {
		return ctxAttrs!=-1 && 0==(ctxAttrs & ISC_RET_INTERMEDIATE_RETURN);
	}
}
